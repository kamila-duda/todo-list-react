{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","tasks","useState","taskContent","setNewTask","className","onSubmit","event","preventDefault","trim","value","onChange","target","type","placeholder","Tasks","hideDone","removeTask","toggleTaskDone","useEffect","localStorage","setItem","JSON","stringify","length","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","disabled","every","Section","title","body","extraContent","Container","props","children","App","setHideDone","parse","getItem","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uVA0BeA,G,MAvBF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,WAAwB,KAAZC,MACUC,mBAAS,KADP,mBAC7BC,EAD6B,KAChBC,EADgB,KAUpC,OAEQ,0BAAMC,UAAU,OAAOC,SAVV,SAACC,GAClBA,EAAMC,iBACmB,KAArBL,EAAYM,SAGhBT,EAAWG,EAAYM,QACvBL,EAAW,OAKH,2BAAOM,MAAOP,EACVQ,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBR,EAAWQ,EAAOF,QAC5CG,KAAK,OACLR,UAAU,aACVS,YAAY,0BAChB,4BAAQT,UAAU,gBAAlB,oBCuBDU,G,MAzCD,SAAC,GAAqD,IAAnDd,EAAkD,EAAlDA,MAAOe,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,eAI5C,OAHAC,qBAAU,WACRC,aAAaC,QAAQ,QAASC,KAAKC,UAAUtB,MAC5C,CAACA,IACCA,EAAMuB,OAIT,wBAAInB,UAAU,SACXJ,EAAMwB,KAAI,SAAAC,GAAI,OACb,wBACEC,IAAKD,EAAKE,GACVvB,UAAS,qBACPqB,EAAKG,MAAQb,EAAW,sBAAwB,GADzC,MAIT,4BACEc,QAAS,kBAAMZ,EAAeQ,EAAKE,KACnCvB,UAAU,sBAEV,uBAAGA,UAAWqB,EAAKG,KAAO,UAAY,MAExC,0BACExB,UAAS,sBACPqB,EAAKG,KAAO,2BAA6B,KAG1CH,EAAKK,SAER,4BACED,QAAS,kBAAMb,EAAWS,EAAKE,KAC/BvB,UAAU,uBAEV,uBAAGA,UAAU,2BA5Bd,6DCqBI2B,G,MA3BC,SAAC,GAAqD,IAAnD/B,EAAkD,EAAlDA,MAAOe,EAA2C,EAA3CA,SAAUiB,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WAClD,OAAqB,IAAjBjC,EAAMuB,OACD,KAGP,yBAAKnB,UAAU,WACZJ,EAAMuB,OAAS,GACd,oCACE,4BACEW,SAAUlC,EAAMmC,OAAM,qBAAGP,QACzBC,QAASG,EACT5B,UAAU,uCAETW,EAAW,aAAU,QALxB,mBAOA,4BACEc,QAASI,EACT7B,UAAU,8BACV8B,SAAUlC,EAAMmC,OAAM,qBAAGP,SAH3B,6BCJKQ,G,MAVC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,aAAf,OACZ,6BAASnC,UAAU,WACf,wBAAIA,UAAU,mBAAmBiC,GAChCE,EACD,yBAAKnC,UAAU,iBAEVkC,MCFEE,EALG,SAACC,GAAD,OACd,0BAAMrC,UAAU,aACXqC,EAAMC,W,MC+EAC,MA3Ef,WAAiB,IAAD,EACkB1C,oBAAS,GAD3B,mBACPc,EADO,KACG6B,EADH,OAEY3C,mBACsB,OAA9CoB,KAAKwB,MAAM1B,aAAa2B,QAAQ,UAC5B,GACAzB,KAAKwB,MAAM1B,aAAa2B,QAAQ,WALxB,mBAEP9C,EAFO,KAEA+C,EAFA,KA4Cd,OACE,kBAAC,EAAD,KACE,wBAAI3C,UAAU,UAAd,oBACA,kBAAC,EAAD,CACEiC,MAAM,qBACNC,KAAM,kBAAC,EAAD,CAAMvC,WAfC,SAAAG,GACjB6C,GAAS,SAAA/C,GAAK,4BACTA,GADS,CAEZ,CACE8B,QAAS5B,EACT0B,MAAM,EACND,GAAqB,IAAjB3B,EAAMuB,OAAe,EAAIvB,EAAMA,EAAMuB,OAAS,GAAGI,GAAK,SAStB3B,MAAOA,MAE7C,kBAAC,EAAD,CACEqC,MAAM,mBACNE,aACE,kBAAC,EAAD,CACEvC,MAAOA,EACPe,SAAUA,EACViB,eAjDa,WACrBY,GAAY,SAAA7B,GAAQ,OAAKA,MAiDjBkB,WAhCS,WACjBc,GAAS,SAAA/C,GAAK,OACZA,EAAMwB,KAAI,SAAAC,GAAI,kCACTA,GADS,IAEZG,MAAM,aA+BNU,KACE,kBAAC,EAAD,CACEtC,MAAOA,EACPe,SAAUA,EACVC,WArDS,SAAAW,GACjBoB,GAAS,SAAA/C,GAAK,OAAIA,EAAMgD,QAAO,SAAAvB,GAAI,OAAIA,EAAKE,KAAOA,SAqD3CV,eAlDa,SAAAU,GACrBoB,GAAS,SAAA/C,GAAK,OACZA,EAAMwB,KAAI,SAAAC,GACR,OAAIA,EAAKE,KAAOA,EACP,2BAAKF,GAAZ,IAAkBG,MAAOH,EAAKG,OAEzBH,SA6CHsB,SAAUA,QC/DFE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d08d110d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask, tasks }) => {\r\n    const [taskContent, setNewTask] = useState(\"\");\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (taskContent.trim()===\"\") {\r\n            return;\r\n        }; \r\n        addNewTask(taskContent.trim());\r\n        setNewTask(\"\");\r\n    };\r\n    return (\r\n        (\r\n            <form className=\"form\" onSubmit={onFormSubmit}>\r\n                <input value={taskContent}\r\n                    onChange={({ target }) => setNewTask(target.value)}\r\n                    type=\"text\"\r\n                    className=\"form__item\"\r\n                    placeholder=\"Co jest do zrobienia?\" />\r\n                <button className=\"form__button\">Dodaj zadanie</button>\r\n            </form>\r\n        )\r\n    )\r\n}\r\nexport default Form;","import React, { useEffect } from 'react'\r\nimport './style.css'\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => {\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks))\r\n  }, [tasks])\r\n  if (!tasks.length) {\r\n    return <p>brak zadań do wykonania</p>\r\n  }\r\n  return (\r\n    <ul className='tasks'>\r\n      {tasks.map(task => (\r\n        <li\r\n          key={task.id}\r\n          className={`tasks__item${\r\n            task.done && hideDone ? '  tasks__item--hide' : ''\r\n          } `}\r\n        >\r\n          <button\r\n            onClick={() => toggleTaskDone(task.id)}\r\n            className='tasks__checkButton'\r\n          >\r\n            <i className={task.done ? 'icon-ok' : ''}></i>\r\n          </button>\r\n          <span\r\n            className={`tasks__text ${\r\n              task.done ? 'tasks__text--lineThrough' : ''\r\n            }`}\r\n          >\r\n            {task.content}\r\n          </span>\r\n          <button\r\n            onClick={() => removeTask(task.id)}\r\n            className='tasks__deleteButton'\r\n          >\r\n            <i className='icon-trash-empty'></i>\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Tasks\r\n","import React from 'react'\r\nimport './style.css'\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n  if (tasks.length === 0) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className='buttons'>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <button\r\n            disabled={tasks.every(({ done }) => !done)}\r\n            onClick={toggleHideDone}\r\n            className='buttons__button toggleHideDoneTasks'\r\n          >\r\n            {hideDone ? 'Pokaż' : 'Ukryj'} ukończone\r\n          </button>\r\n          <button\r\n            onClick={setAllDone}\r\n            className='buttons__button markAllDone'\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default Buttons\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraContent}) => (\r\n    <section className=\"section\">\r\n        <h2 className=\"section__header\">{title}</h2>\r\n        {extraContent}\r\n        <div className=\"section__body\">\r\n            \r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Container = (props) => (\r\n    <main className=\"container\">\r\n        {props.children}\r\n    </main>\r\n);\r\nexport default Container;","import React, { useState } from 'react'\nimport Form from './Form'\nimport Tasks from './Tasks'\nimport Buttons from './Buttons'\nimport Section from './Section'\nimport Container from './Container'\nimport './fontello/css/fontello.css'\n\nfunction App () {\n  const [hideDone, setHideDone] = useState(false)\n  const [tasks, setTasks] = useState(\n    JSON.parse(localStorage.getItem('tasks')) === null\n      ? []\n      : JSON.parse(localStorage.getItem('tasks'))\n  )\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone)\n  }\n\n  const removeTask = id => {\n    setTasks(tasks => tasks.filter(task => task.id !== id))\n  }\n\n  const toggleTaskDone = id => {\n    setTasks(tasks =>\n      tasks.map(task => {\n        if (task.id === id) {\n          return { ...task, done: !task.done }\n        }\n        return task\n      })\n    )\n  }\n  const setAllDone = () => {\n    setTasks(tasks =>\n      tasks.map(task => ({\n        ...task,\n        done: true\n      }))\n    )\n  }\n  const addNewTask = taskContent => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: taskContent,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1\n      }\n    ])\n  }\n  return (\n    <Container>\n      <h1 className='header'>Lista zadań</h1>\n      <Section\n        title='Dodaj nowe zadanie'\n        body={<Form addNewTask={addNewTask} tasks={tasks} />}\n      />\n      <Section\n        title='Lista zadań'\n        extraContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n            setTasks={setTasks}\n          />\n        }\n      />\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}