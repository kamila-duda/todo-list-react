{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","type","placeholder","Tasks","props","tasks","map","task","done","hideShowButtonFlag","content","Buttons","length","disabled","every","Section","title","body","extraContent","Container","children","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSASeA,G,UANF,kBACT,0BAAMC,UAAU,QACZ,2BAAOC,KAAK,OAAOD,UAAU,aAAaE,YAAY,0BACtD,4BAAQF,UAAU,gBAAlB,oBCUOG,G,MAXD,SAACC,GAAD,OACV,wBAAIJ,UAAU,SACTI,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBACAP,UAAS,qBAAgBO,EAAKC,MAAQJ,EAAMK,mBAAqB,sBAAwB,GAAhF,MACL,4BAAQT,UAAU,sBAAlB,IAAyCO,EAAKC,KAAO,UAAY,GAAjE,KAA8E,0BAAMR,UAAS,sBAAiBO,EAAKC,KAAO,wCAA4C,KAAOD,EAAKG,SAAe,4BAAQV,UAAU,uBAAsB,uBAAGA,UAAU,uBCMvPW,G,MAdC,SAAC,GAAiC,IAAhCN,EAA+B,EAA/BA,MAAOI,EAAwB,EAAxBA,mBACrB,OAAoB,IAAjBJ,EAAMO,OACE,KAGP,yBAAKZ,UAAU,WACX,4BAAQA,UAAU,uCACrBS,EAAqB,aAAU,QAD5B,mBAEJ,4BAAQT,UAAU,8BAClBa,SAAUR,EAAMS,OAAM,qBAAEN,SADxB,4BCGOO,G,MAVC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMC,EAAf,EAAeA,aAAf,OACZ,6BAASlB,UAAU,WACf,wBAAIA,UAAU,mBAAmBgB,GAChCE,EACD,yBAAKlB,UAAU,iBAEViB,MCFEE,EALG,SAACf,GAAD,OACd,0BAAMJ,UAAU,aACXI,EAAMgB,WCETf,EAAQ,CACZ,CAACgB,GAAI,EAAGX,QAAS,yBAAqBF,MAAM,GAC5C,CAACa,GAAI,EAAGX,QAAS,yBAAgBF,MAAM,IAoB1Bc,MAhBf,WACE,OACE,kBAAC,EAAD,KACI,wBAAItB,UAAU,UAAd,oBACA,kBAAC,EAAD,CACAgB,MAAM,qBAAqBC,KAAM,kBAAC,EAAD,QAEjC,kBAAC,EAAD,CACAD,MAAM,mBAAeE,aAAc,kBAAC,EAAD,CAASb,MAAOA,EAAOI,oBAVvC,IAWnBQ,KAAM,kBAAC,EAAD,CAAOZ,MAAOA,EAAOI,oBAXR,QCEPc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f9076b3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n    <form className=\"form\">\r\n        <input type=\"text\" className=\"form__item\" placeholder=\"Co jest do zrobienia?\"/>\r\n        <button className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n)\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n//import \"./fontello.css\";\r\n//import \"./fontello.svg\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"tasks\">\r\n        {props.tasks.map(task => (\r\n            <li\r\n            className={`tasks__item${task.done && props.hideShowButtonFlag ? \"  tasks__item--hide\" : \"\"} `}>\r\n                <button className=\"tasks__checkButton\"> {task.done ? \"&#x2713\" : \"\"} </button><span className={`tasks__text ${task.done ? \"style=\\\"text-decoration: line-through\\\"\" : \"\"}`}>{task.content}</span><button className=\"tasks__deleteButton\"><i className=\"icon-trash\"></i></button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\nconst Buttons = ({tasks, hideShowButtonFlag}) => {\r\n    if(tasks.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button className=\"buttons__button toggleHideDoneTasks\">\r\n        {hideShowButtonFlag ? \"Pokaż\" : \"Ukryj\"} ukończone</button>\r\n        <button className=\"buttons__button markAllDone\"\r\n        disabled={tasks.every(({done}) => done) }>\r\n        Ukończ wszystkie</button>\r\n        </div>\r\n    )\r\n};\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraContent}) => (\r\n    <section className=\"section\">\r\n        <h2 className=\"section__header\">{title}</h2>\r\n        {extraContent}\r\n        <div className=\"section__body\">\r\n            \r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Container = (props) => (\r\n    <main className=\"container\">\r\n        {props.children}\r\n    </main>\r\n);\r\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Container from \"./Container\"\nconst tasks = [\n  {id: 1, content: \"przejśc na Reacta\", done: false},\n  {id: 2, content: \"wyjść z psem\", done: true},\n];\nconst hideShowButtonFlag = false;\n\nfunction App() {\n  return (\n    <Container>\n        <h1 className=\"header\">Lista zadań</h1>\n        <Section \n        title=\"Dodaj nowe zadanie\" body={<Form />} \n        />\n        <Section \n        title=\"Lista zadań\"  extraContent={<Buttons tasks={tasks} hideShowButtonFlag={hideShowButtonFlag} />}\n        body={<Tasks tasks={tasks} hideShowButtonFlag={hideShowButtonFlag}/>} \n        />\n        \n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}