{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Container/styled.js","Container/index.js","useTasks.js","App.js","serviceWorker.js","GlobalStyle.js","index.js"],"names":["FormContainer","styled","form","FormInput","input","Button","button","Form","addNewTask","useState","taskContent","setNewTask","inputRef","useRef","onSubmit","event","preventDefault","current","focus","trim","ref","value","onChange","target","type","placeholder","List","ul","Item","li","hidden","css","CheckButton","DeleteButton","Content","span","taskDone","Tasks","tasks","hideDone","removeTask","toggleTaskDone","length","map","task","key","id","done","onClick","className","content","ButtonsContainer","div","Buttons","toggleHideDone","setAllDone","disabled","every","SectionContainer","section","SectionHeader","h2","SectionBody","Section","title","body","extraContent","Main","main","Container","props","children","useTasks","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","App","setHideDone","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52ce0ee5.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const FormContainer = styled.form`\r\n  background-color: #fff;\r\n  margin: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n`\r\nexport const FormInput = styled.input`\r\n  flex-basis: 75%;\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    padding: 8px;\r\n    margin-bottom: 10px;\r\n  }\r\n`\r\n\r\nexport const Button = styled.button`\r\n  flex-basis: 20%;\r\n  background-color: teal;\r\n  color: #fff;\r\n  padding: 13px;\r\n  border: unset;\r\n  cursor: pointer;\r\n  transition: 1s;\r\n  &:hover {\r\n    background-color: rgb(3, 192, 192);\r\n    transform: scale(1.1);\r\n  }\r\n  @media (max-width: 767px) {\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n  }\r\n`\r\n","import React, { useState, useRef } from 'react'\r\nimport { FormContainer, FormInput, Button } from './styled'\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [taskContent, setNewTask] = useState('')\r\n  const inputRef = useRef(null)\r\n  const onFormSubmit = event => {\r\n    event.preventDefault()\r\n    inputRef.current.focus()\r\n    if (taskContent.trim() === '') {\r\n      return\r\n    }\r\n    addNewTask(taskContent.trim())\r\n    setNewTask('')\r\n  }\r\n  \r\n  return (\r\n    <FormContainer onSubmit={onFormSubmit}>\r\n      <FormInput\r\n        ref={inputRef}\r\n        value={taskContent}\r\n        onChange={({ target }) => setNewTask(target.value)}\r\n        type='text'\r\n        placeholder='Co jest do zrobienia?'\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </FormContainer>\r\n  )\r\n}\r\nexport default Form","import styled, { css } from 'styled-components'\r\n\r\nexport const List = styled.ul`\r\n  background-color: #fff;\r\n  min-height: 70px;\r\n  margin: 0;\r\n  padding: 20px;\r\n  list-style: none;\r\n`\r\n\r\nexport const Item = styled.li`\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`\r\n\r\nexport const Button = styled.button`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: none;\r\n  margin: 10px;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  transition: 1s;\r\n`\r\nexport const CheckButton = styled(Button)`\r\n  background-color: green;\r\n\r\n  &:hover {\r\n    background-color: rgb(0, 223, 0);\r\n  }\r\n`\r\n\r\nexport const DeleteButton = styled(Button)`\r\n  background-color: red;\r\n  justify-self: flex-end;\r\n\r\n  &:hover {\r\n    background-color: rgb(255, 111, 111);\r\n  }\r\n`\r\n\r\nexport const Content = styled.span`\r\n  flex-grow: 1;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n\r\n  ${({ taskDone }) =>\r\n    taskDone &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`\r\n\r\n// export const Icon = styled.i`\r\n//     &::before{\r\n//         margin: auto;\r\n//     }\r\n// `;\r\n","import React from 'react'\r\nimport {List, Item, CheckButton, DeleteButton, Content} from \"./styled\"\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => {\r\n  if (!tasks.length) {\r\n    return <p>brak zadań do wykonania</p>\r\n  }\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden = {task.done && hideDone}\r\n        >\r\n          <CheckButton\r\n            onClick={() => toggleTaskDone(task.id)}\r\n          >\r\n            <i className={task.done ? 'icon-ok' : ''}></i>\r\n          </CheckButton>\r\n          <Content\r\n          taskDone = {task.done}\r\n          >\r\n            {task.content}\r\n          </Content>\r\n          <DeleteButton\r\n            onClick={() => removeTask(task.id)}\r\n          >\r\n            <i className='icon-trash-empty'></i>\r\n          </DeleteButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Tasks","import styled from 'styled-components'\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`\r\nexport const Button = styled.button`\r\n  color: teal;\r\n  cursor: pointer;\r\n  background-color: transparent;\r\n  border: none;\r\n  margin: 10px;\r\n  transition: 1s;\r\n  &:hover{\r\n    color: rgb(10, 218, 218);\r\n  }\r\n  &:disabled{\r\n    color: gray;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport {ButtonsContainer, Button} from \"./styled\"\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n  if (tasks.length === 0) {\r\n    return null\r\n  };\r\n \r\n  return (\r\n    <ButtonsContainer>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n            disabled={tasks.every(({ done }) => !done)}\r\n            onClick={toggleHideDone}\r\n          >\r\n            {hideDone ? 'Pokaż' : 'Ukryj'} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={setAllDone}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </ButtonsContainer>\r\n  )\r\n}\r\nexport default Buttons","import styled from 'styled-components'\r\n\r\nexport const SectionContainer = styled.section`\r\n  margin: 10px 0;\r\n  background: white;\r\n  box-shadow: 0 0 5px #ddd;\r\n`\r\n\r\nexport const SectionHeader = styled.h2`\r\n  border-bottom: 1px solid #ddd;\r\n  margin: 0;\r\n  padding: 20px;\r\n  font-size: 22px;\r\n`\r\n\r\nexport const SectionBody = styled.div`\r\n  padding: 20px;\r\n`\r\n","import React from 'react'\r\nimport { SectionContainer, SectionHeader, SectionBody } from './styled'\r\n\r\nconst Section = ({ title, body, extraContent }) => (\r\n  <SectionContainer>\r\n    <SectionHeader>{title}</SectionHeader>\r\n    {extraContent}\r\n    <SectionBody>{body}</SectionBody>\r\n  </SectionContainer>\r\n)\r\nexport default Section\r\n","import styled from 'styled-components'\r\n\r\nexport const Main = styled.main`\r\n  max-width: 900px;\r\n  margin: 40px auto;\r\n  \r\n  @media (max-width: 767px) {\r\n    margin: 10px;\r\n  }\r\n`\r\n","import React from \"react\";\r\nimport {Main} from \"./styled\"\r\n\r\nconst Container = (props) => (\r\n    <Main>\r\n        {props.children}\r\n    </Main>\r\n);\r\nexport default Container;","import { useState, useEffect } from 'react'\r\n\r\nconst useTasks = () => {\r\n  const [tasks, setTasks] = useState(\r\n    JSON.parse(localStorage.getItem('tasks')) === null\r\n      ? []\r\n      : JSON.parse(localStorage.getItem('tasks'))\r\n  )\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks))\r\n  }, [tasks])\r\n  const removeTask = id => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id))\r\n  }\r\n\r\n  const toggleTaskDone = id => {\r\n    setTasks(tasks =>\r\n      tasks.map(task => {\r\n        if (task.id === id) {\r\n          return { ...task, done: !task.done }\r\n        }\r\n        return task\r\n      })\r\n    )\r\n  }\r\n  const setAllDone = () => {\r\n    setTasks(tasks =>\r\n      tasks.map(task => ({\r\n        ...task,\r\n        done: true\r\n      }))\r\n    )\r\n  }\r\n  const addNewTask = taskContent => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content: taskContent,\r\n        done: false,\r\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1\r\n      }\r\n    ])\r\n  }\r\n  return {\r\n    tasks,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    addNewTask\r\n  }\r\n}\r\nexport default useTasks\r\n","import React, { useState, useEffect } from 'react'\r\nimport Form from './Form'\r\nimport Tasks from './Tasks'\r\nimport Buttons from './Buttons'\r\nimport Section from './Section'\r\nimport Container from './Container'\r\nimport './fontello/css/fontello.css'\r\nimport useTasks from './useTasks'\r\n\r\nfunction App () {\r\n  const [hideDone, setHideDone] = useState(\r\n    localStorage.getItem('hideDone') === 'false'\r\n      ? false\r\n      : JSON.parse(localStorage.getItem('hideDone'))\r\n  )\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('hideDone', JSON.stringify(hideDone))\r\n  }, [hideDone])\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone)\r\n  }\r\n\r\n  const {\r\n    tasks,\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n    addNewTask\r\n  } = useTasks()\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Lista zadań</h1>\r\n      <Section\r\n        title='Dodaj nowe zadanie'\r\n        body={<Form addNewTask={addNewTask} />}\r\n      />\r\n      <Section\r\n        title='Lista zadań'\r\n        extraContent={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toggleHideDone={toggleHideDone}\r\n            setAllDone={setAllDone}\r\n          />\r\n        }\r\n        body={\r\n          <Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n  box-sizing: border-box;\r\n}\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: inherit;\r\n} \r\nbody{\r\n  background-color: #ddd;\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n}\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {GlobalStyle} from \"./GlobalStyle\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}